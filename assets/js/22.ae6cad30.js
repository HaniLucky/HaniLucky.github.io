(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{222:function(s,t,a){"use strict";a.r(t);var r=a(0),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[s._v("#")]),s._v(" redis")]),s._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("p",[s._v("string（字符串）hash（哈希），list（列表），set（集合）及 zset(sorted set：有序集合)。")]),s._v(" "),a("h2",{attrs:{id:"持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[s._v("#")]),s._v(" 持久化")]),s._v(" "),a("h3",{attrs:{id:"rdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[s._v("#")]),s._v(" rdb")]),s._v(" "),a("p",[s._v("rdb 是 redis 默认的缓存方案,在指定时间内,执行指定次数的操作,则会将内存中的数据写入磁盘.(在指定文件内生成一个 dump.rdb 文件).Redis 重启通过加载 dump.rdb 文件恢复数据")]),s._v(" "),a("p",[s._v("默认的修改配置 3600 1 300 100 60 10000 (1 个小时一次修改,5 分钟 100 此修改,1 分钟 10000 次修改)")]),s._v(" "),a("h3",{attrs:{id:"rdb-aof-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb-aof-的区别"}},[s._v("#")]),s._v(" rdb/aof 的区别")]),s._v(" "),a("p",[s._v("rdb\n​ 在指定时间内将内存中的数据集快照写入到磁盘\n​ 优点:只有一份 rdb 文件,可随时备份\n​ 比 AOF 文件小,加载效率高.\n​ 不阻塞主进程,io 效率高")]),s._v(" "),a("p",[s._v("AOF 持久化\n​ 将每一个操作以日志的形式记录在服务器,在 redis 启动之初读取文件来重新构建数据库,保证启动后数据库中的数据是完整的\n​ 优点:每次改动同步数据安全性好以 append 的方式追加日志,不会对旧日志文件产生影响")]),s._v(" "),a("blockquote",[a("p",[s._v("参考: "),a("a",{attrs:{href:"https://www.cnblogs.com/itdragon/p/7906481.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Redis 持久化之RDB和AOF"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 查询redis中所有的key\nkeys *\n# 查询配置列表\nconfig get *\nconfig get [config_name]\nconfig get dir // 获取dump日志文件存储的位置\n# 获取值的类型\ntype [key_name]\n# 将redis所有的数据快照以rdb文件的形式保存到硬盘\nsave\n#\t将redis所有的数据快照以rdb文件的形式异步保存到硬盘\nbgsave\n# 获取reids相关的版本等信息\ninfo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h2",{attrs:{id:"使用过程中可能遇到的问题及解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用过程中可能遇到的问题及解决方案"}},[s._v("#")]),s._v(" 使用过程中可能遇到的问题及解决方案")]),s._v(" "),a("h3",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),a("p",[s._v("缓存穿透，是指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是")]),s._v(" "),a("p",[s._v("数查询先进行缓存查询，如果 key 不存在或者 key 已经过期，再对数据库进行查询，")]),s._v(" "),a("p",[s._v("把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/11/04/ngwJEBUpGk152hs.png",alt:"image.png"}})]),s._v(" "),a("p",[s._v("Redis 缓存流程")]),s._v(" "),a("p",[s._v("代码流程")]),s._v(" "),a("p",[s._v("1、参数传入对象主键 ID")]),s._v(" "),a("p",[s._v("2、根据 key 从缓存中获取对象")]),s._v(" "),a("p",[s._v("3、如果对象不为空，直接返回")]),s._v(" "),a("p",[s._v("4、如果对象为空，进行数据库查询")]),s._v(" "),a("p",[s._v("5、如果从数据库查询出的对象不为空，则放入缓存（设定过期时间）")]),s._v(" "),a("p",[s._v("想象一下这个情况，如果传入的参数为-1，会是怎么样？这个-1，就是一定不存在的对象。就会每次都去查询数据库，而每次查询都是空，每次又都不会进行缓存。假如有恶意攻击，就可以利用这个漏洞，对数据库造成压力，甚至压垮数据库。即便是采用 UUID，也是很容易找到一个不存在的 KEY，进行攻击。")]),s._v(" "),a("p",[s._v("小编在工作中，会采用缓存空值的方式，也就是【代码流程】中第 5 步，如果从数据库查询的对象为空，也放入缓存，只是设定的缓存过期时间较短，比如设置为 60 秒。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/11/04/8SKMlmXIU2NRzAh.png",alt:"image.png"}})]),s._v(" "),a("h3",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),a("p",[s._v("缓存雪崩，是指在某一个时间段，缓存集中过期失效。")]),s._v(" "),a("p",[s._v("产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。")]),s._v(" "),a("p",[s._v("小编在做电商项目的时候，一般是采取不同分类商品，缓存不同周期。在同一分类中的商品，加上一个随机因子。这样能尽可能分散缓存过期时间，而且，热门类目的商品缓存时间长一些，冷门类目的商品缓存时间短一些，也能节省缓存服务的资源。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/11/04/rKpW8NMSxwZlVCJ.png",alt:"image.png"}})]),s._v(" "),a("p",[s._v("缓存加入随机因子")]),s._v(" "),a("p",[s._v("其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，那么那个时候数据库能顶住压力，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。")]),s._v(" "),a("h3",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),a("p",[s._v("缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。ß")]),s._v(" "),a("p",[s._v("小编在做电商项目的时候，把这货就成为“爆款”。")]),s._v(" "),a("p",[s._v("其实，大多数情况下这种爆款很难对数据库服务器造成压垮性的压力。达到这个级别的公司没有几家的。所以，务实主义的小编，对主打商品都是早早的做好了准备，让缓存永不过期。即便某些商品自己发酵成了爆款，也是直接设为永不过期就好了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);